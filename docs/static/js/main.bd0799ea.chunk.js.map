{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MapModel","props","scene","useGLTF","scale","object","Loading","id","src","App","fallback","intensity","position","OrbitControls","args","ReactDOM","render","document","querySelector","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById"],"mappings":"0PAoCA,SAASA,EAASC,GAEhB,IAAQC,EAAUC,YAAQ,iEAAlBD,MACR,OAAO,uCAAYE,MAAO,EAAKC,OAAQH,GAAWD,IAgBpD,SAASK,IACP,OACE,qBAAKC,GAAG,UAAR,SACE,qBAAMC,IAAI,6DAQhB,SAASC,IACP,OACE,cAAC,WAAD,CAAWC,SAAU,cAACJ,EAAD,IAArB,SACE,eAAC,IAAD,WACE,8BAAcK,UAAW,KACzB,4BAAYC,SAAU,CAAC,EAAG,EAAG,KAK7B,cAAC,IAAD,IACA,cAACC,EAAA,EAAD,IAIE,cAAC,IAAD,UACC,cAACb,EAAD,CAAWc,KAAM,CAAC,GAAK,GAAK,aASvCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,UAEjCT,QCjFAU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdL,IAASC,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,EAAD,MAEFX,SAASY,eAAe,SAM1BV,M","file":"static/js/main.bd0799ea.chunk.js","sourcesContent":["import ReactDOM from \"react-dom\";\nimport React, {\n  useState,\n  useEffect,\n  useRef,\n  Suspense,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport {\n  VRCanvas,\n  useXREvent,\n  Hands,\n  Select,\n  Hover,\n  useXR,\n  Interactive,\n  RayGrab,\n  useHitTest,\n  ARCanvas,\n  DefaultXRControllers,\n} from \"@react-three/xr\";\n// import { OrbitControls, Sky, Text, Plane, Box } from '@react-three/drei'\nimport { Box, Sky, Text, OrbitControls ,useGLTF} from \"@react-three/drei\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport { TextureLoader } from 'three/src/loaders/TextureLoader'\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'\nimport { useLoader,primitive ,meshPhongMaterial } from '@react-three/fiber'\n\nimport { Group, Mesh } from \"three\";\nimport \"./App.css\";\n\n\n\n\n\nfunction MapModel(props) {\n \n  const { scene } = useGLTF('https://trailseeker.github.io/React-XR-MAP/WebDigitalTwin.glb');\n  return <primitive  scale={1}   object={scene} {...props} />\n  \n}\n\n\nfunction PlayerExample() {\n  const { player } = useXR();\n\n  useFrame(() => {\n    player.rotation.x = player.rotation.y += 0.01;\n  });\n\n  return null;\n}\n\n\nfunction Loading(){\n  return(\n    <div id='loading'>\n      <img  src='https://trailseeker.github.io/React-XR-MAP/loading.gif' />\n  \n    </div>\n   \n\n  )\n}\n\nfunction App() {\n  return (\n    <Suspense  fallback={<Loading/> }>\n      <VRCanvas>\n        <ambientLight intensity={0.5} />\n        <pointLight position={[5, 5, 5]} />\n\n\n    \n        \n        <DefaultXRControllers />\n        <OrbitControls />\n\n\n\n          <RayGrab>\n           <MapModel  args={[0.1, 0.1, 0.1]}  />\n          </RayGrab>\n      \n        {/* <HitTestExample /> */}\n      </VRCanvas>\n    </Suspense>\n  );\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}